import os
import random
import time
import requests
import tweepy
from datetime import datetime

# Environment variables
PERPLEXITY_API = os.getenv("PERPLEXITY_API")
API_KEY = os.getenv("API_KEY")
API_SECRET = os.getenv("API_SECRET")
ACCESS_TOKEN = os.getenv("ACCESS_TOKEN")
ACCESS_SECRET = os.getenv("ACCESS_SECRET")

# X (Twitter) client setup
client = tweepy.Client(
    consumer_key=API_KEY,
    consumer_secret=API_SECRET,
    access_token=ACCESS_TOKEN,
    access_token_secret=ACCESS_SECRET
)

# Prompts with probability (total 12)
PROMPTS = [
    ("‡§≠‡§æ‡§∞‡§§ ‡§Æ‡•á‡§Ç ‡§Ü‡§ú ‡§ï‡•Ä ‡§è‡§ï ‡§∏‡§ï‡§æ‡§∞‡§æ‡§§‡•ç‡§Æ‡§ï ‡§ñ‡§¨‡§∞, 250 ‡§Ö‡§ï‡•ç‡§∑‡§∞‡•ã‡§Ç ‡§∏‡•á ‡§ï‡§Æ ‡§Æ‡•á‡§Ç ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç ‡§¨‡§§‡§æ‡§á‡§è‡•§", 4),
    ("‡§¨‡•Ä‡§ú‡•á‡§™‡•Ä ‡§∏‡•á ‡§ú‡•Å‡§°‡§º‡•Ä ‡§è‡§ï ‡§∏‡§ï‡§æ‡§∞‡§æ‡§§‡•ç‡§Æ‡§ï ‡§ñ‡§¨‡§∞, 250 ‡§Ö‡§ï‡•ç‡§∑‡§∞‡•ã‡§Ç ‡§∏‡•á ‡§ï‡§Æ ‡§Æ‡•á‡§Ç ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç ‡§¨‡§§‡§æ‡§á‡§è‡•§", 1),
    ("‡§ï‡§æ‡§Ç‡§ó‡•ç‡§∞‡•á‡§∏ ‡§∏‡•á ‡§ú‡•Å‡§°‡§º‡•Ä ‡§è‡§ï ‡§∏‡§ï‡§æ‡§∞‡§æ‡§§‡•ç‡§Æ‡§ï ‡§ñ‡§¨‡§∞, 250 ‡§Ö‡§ï‡•ç‡§∑‡§∞‡•ã‡§Ç ‡§∏‡•á ‡§ï‡§Æ ‡§Æ‡•á‡§Ç ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç ‡§¨‡§§‡§æ‡§á‡§è‡•§", 1),
    ("‡§ï‡§æ‡§Ç‡§ó‡•ç‡§∞‡•á‡§∏ ‡§∏‡•á ‡§ú‡•Å‡§°‡§º‡•Ä ‡§è‡§ï ‡§®‡§ï‡§æ‡§∞‡§æ‡§§‡•ç‡§Æ‡§ï ‡§ñ‡§¨‡§∞, 250 ‡§Ö‡§ï‡•ç‡§∑‡§∞‡•ã‡§Ç ‡§∏‡•á ‡§ï‡§Æ ‡§Æ‡•á‡§Ç ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç ‡§¨‡§§‡§æ‡§á‡§è‡•§", 1),
    ("‡§¨‡•Ä‡§ú‡•á‡§™‡•Ä ‡§∏‡•á ‡§ú‡•Å‡§°‡§º‡•Ä ‡§è‡§ï ‡§®‡§ï‡§æ‡§∞‡§æ‡§§‡•ç‡§Æ‡§ï ‡§ñ‡§¨‡§∞, 250 ‡§Ö‡§ï‡•ç‡§∑‡§∞‡•ã‡§Ç ‡§∏‡•á ‡§ï‡§Æ ‡§Æ‡•á‡§Ç ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç ‡§¨‡§§‡§æ‡§á‡§è‡•§", 1),
    ("‡§¶‡•Å‡§®‡§ø‡§Ø‡§æ ‡§ï‡•Ä ‡§è‡§ï ‡§∏‡§ï‡§æ‡§∞‡§æ‡§§‡•ç‡§Æ‡§ï ‡§ñ‡§¨‡§∞, 250 ‡§Ö‡§ï‡•ç‡§∑‡§∞‡•ã‡§Ç ‡§∏‡•á ‡§ï‡§Æ ‡§Æ‡•á‡§Ç ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç ‡§¨‡§§‡§æ‡§á‡§è‡•§", 2),
    ("‡§¶‡•Å‡§®‡§ø‡§Ø‡§æ ‡§ï‡•Ä ‡§è‡§ï ‡§®‡§ï‡§æ‡§∞‡§æ‡§§‡•ç‡§Æ‡§ï ‡§ñ‡§¨‡§∞, 250 ‡§Ö‡§ï‡•ç‡§∑‡§∞‡•ã‡§Ç ‡§∏‡•á ‡§ï‡§Æ ‡§Æ‡•á‡§Ç ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç ‡§¨‡§§‡§æ‡§á‡§è‡•§", 1),
    ("‡§≠‡§æ‡§∞‡§§ ‡§ï‡•Ä ‡§è‡§ï ‡§®‡§ï‡§æ‡§∞‡§æ‡§§‡•ç‡§Æ‡§ï ‡§ñ‡§¨‡§∞, 250 ‡§Ö‡§ï‡•ç‡§∑‡§∞‡•ã‡§Ç ‡§∏‡•á ‡§ï‡§Æ ‡§Æ‡•á‡§Ç ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç ‡§¨‡§§‡§æ‡§á‡§è‡•§", 1),
]

def choose_prompt():
    total = sum(weight for _, weight in PROMPTS)
    r = random.uniform(0, total)
    upto = 0
    for prompt, weight in PROMPTS:
        if upto + weight >= r:
            return prompt
        upto += weight

def query_perplexity(prompt):
    """Query Perplexity with sonar model."""
    url = "https://api.perplexity.ai/chat/completions"
    headers = {
        "Authorization": f"Bearer {PERPLEXITY_API}",
        "Content-Type": "application/json"
    }
    data = {
        "model": "sonar",
        "messages": [
            {"role": "system", "content": "Respond only with one clear Hindi news item under 250 characters."},
            {"role": "user", "content": prompt}
        ]
    }
    response = requests.post(url, headers=headers, json=data)
    response.raise_for_status()
    text = response.json()["choices"][0]["message"]["content"]
    return text.strip()

def clean_text(text):
    """Remove duplication and non-relevant second news."""
    # If there are multiple news separated by '‡•§' or newline, take first one
    if "‡•§" in text:
        first = text.split("‡•§")[0] + "‡•§"
    elif "\n" in text:
        first = text.split("\n")[0]
    else:
        first = text
    # Remove repetition like "‡§ò‡§ü‡§®‡§æ ‡§ò‡§ü‡§®‡§æ" or "‡§π‡•Å‡§Ü ‡§π‡•Å‡§Ü"
    words = first.split()
    cleaned_words = []
    for i, w in enumerate(words):
        if i == 0 or w != words[i-1]:
            cleaned_words.append(w)
    cleaned = " ".join(cleaned_words)
    # Light human touch
    cleaned = cleaned.replace("‡§π‡•à ‡§π‡•à", "‡§π‡•à").replace("‡§π‡•Å‡§Ü ‡§π‡•Å‡§Ü", "‡§π‡•Å‡§Ü")
    cleaned = cleaned.strip()
    return cleaned[:250]

def post_tweet(text):
    try:
        client.create_tweet(text=text)
        print(f"[{datetime.now()}] ‚úÖ Posted: {text}")
    except Exception as e:
        print(f"‚ùå Tweet failed: {e}")

def main():
    prompt = choose_prompt()
    print(f"üéØ Prompt: {prompt}")
    text = query_perplexity(prompt)
    final_text = clean_text(text)
    post_tweet(final_text)

if __name__ == "__main__":
    main()
